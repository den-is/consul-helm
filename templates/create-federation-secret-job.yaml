{{- if .Values.global.federation.createFederationSecret }}
{{- if not .Values.global.tls.enabled }}{{ fail "global.tls.enabled must be true when global.federation.createFederationSecret is true" }}{{ end }}
{{- if and (not .Values.global.acls.createReplicationToken) (or .Values.global.acls.manageSystemACLs .Values.global.bootstrapACLs) }}{{ fail "global.acls.createReplicationToken must be true when global.acls.manageSystemACLs is true because the federation secret must include the replication token" }}{{ end }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "consul.fullname" . }}-create-federation-secret
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: create-federation-secret
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    {{- /* Hook weight needs to be 1 so that the service account is provisioned first */}}
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ template "consul.fullname" . }}-create-federation-secret
      labels:
        app: {{ template "consul.name" . }}
        chart: {{ template "consul.chart" . }}
        release: {{ .Release.Name }}
        component: create-federation-secret
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
    spec:
      restartPolicy: Never
      serviceAccountName: {{ template "consul.fullname" . }}-create-federation-secret
      volumes:
        - name: consul-server-ca-cert
          secret:
            {{- if .Values.global.tls.caCert.secretName }}
            secretName: {{ .Values.global.tls.caCert.secretName }}
            {{- else }}
            secretName: {{ template "consul.fullname" . }}-ca-cert
            {{- end }}
            items:
              - key: {{ default "tls.crt" .Values.global.tls.caCert.secretKey }}
                path: tls.crt
        - name: consul-server-ca-key
          secret:
            {{- if .Values.global.tls.caKey.secretName }}
            secretName: {{ .Values.global.tls.caKey.secretName }}
            {{- else }}
            secretName: {{ template "consul.fullname" . }}-ca-key
            {{- end }}
            items:
              - key: {{ default "tls.key" .Values.global.tls.caKey.secretKey }}
                path: tls.key
        {{- /* We must incude both auto-encrypt and server CAs because we make API calls to the local
            Consul client (requiring the auto-encrypt CA) but the secret generated must include the server CA */}}
        {{- if .Values.global.tls.enableAutoEncrypt }}
        - name: consul-auto-encrypt-ca-cert
          emptyDir:
            medium: "Memory"
        {{- end }}
        {{- if (and .Values.global.gossipEncryption.secretName .Values.global.gossipEncryption.secretKey) }}
        - name: gossip-encryption-key
          secret:
            secretName: {{ .Values.global.gossipEncryption.secretName }}
            items:
              - key: {{ .Values.global.gossipEncryption.secretKey }}
                path: gossip.key
        {{- end }}

      {{- if .Values.global.tls.enableAutoEncrypt }}
      initContainers:
      {{- include "consul.getAutoEncryptClientCA" . | nindent 6 }}
      {{- end }}

      containers:
        - name: create-federation-secret
          image: "{{ .Values.global.imageK8S }}"
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: CONSUL_HTTP_ADDR
              value: https://$(HOST_IP):8501
            - name: CONSUL_CACERT
              {{- if .Values.global.tls.enableAutoEncrypt }}
              value: /consul/tls/ca/tls.crt
              {{- else }}
              value: /consul/tls/server/ca/cert/tls.crt
              {{- end }}
          volumeMounts:
            - name: consul-server-ca-cert
              mountPath: /consul/tls/server/ca/cert
              readOnly: true
            - name: consul-server-ca-key
              mountPath: /consul/tls/server/ca/key
              readOnly: true
            {{- if (and .Values.global.gossipEncryption.secretName .Values.global.gossipEncryption.secretKey) }}
            - name: gossip-encryption-key
              mountPath: /consul/gossip
              readOnly: true
            {{- end }}
          command:
            - "/bin/sh"
            - "-ec"
            - |
                consul-k8s create-federation-secret \
                  {{- if (and .Values.global.gossipEncryption.secretName .Values.global.gossipEncryption.secretKey) }}
                  -gossip-key-file=/consul/gossip/gossip.key \
                  {{- end }}
                  {{- if .Values.global.acls.createReplicationToken }}
                  -export-replication-token=true \
                  {{- end }}
                  -mesh-gateway-service-name={{ .Values.meshGateway.consulServiceName }} \
                  -k8s-namespace="${NAMESPACE}" \
                  -resource-prefix="{{ template "consul.fullname" . }}" \
                  -server-ca-cert-file=/consul/tls/server/ca/cert/tls.crt \
                  -server-ca-key-file=/consul/tls/server/ca/key/tls.key

  {{- end }}
